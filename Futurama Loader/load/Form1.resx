<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        BA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0r
        BA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0r
        BA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0r
        BA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0r
        BA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0r
        BA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0r
        BA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0r
        BA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rBA0rlaABAzFowESj8X+XzA1I
        /wf/WAAAAABJRU5ErkJggg==
</value>
  </data>
</root>